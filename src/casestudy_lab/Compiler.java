/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package casestudy_lab;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Jimuel Maxwell
 */
public class Compiler extends javax.swing.JFrame {

    /**
     * Creates new form Compiler
     */
    public Compiler() {
        initComponents();
        codeText.setText(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        application = new javax.swing.JPanel();
        file = new javax.swing.JButton();
        lexical = new javax.swing.JButton();
        syntax = new javax.swing.JButton();
        semantic = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        resultPanel = new javax.swing.JPanel();
        resultText = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();
        codePanel = new javax.swing.JPanel();
        codeText = new javax.swing.JLabel();
        tokenText = new javax.swing.JLabel();
        tokenLabel = new javax.swing.JLabel();
        developersLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compiler");

        application.setBackground(new java.awt.Color(255, 153, 153));

        file.setBackground(new java.awt.Color(255, 255, 255));
        file.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        file.setForeground(new java.awt.Color(0, 0, 0));
        file.setText("Open File");
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        lexical.setBackground(new java.awt.Color(255, 255, 255));
        lexical.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        lexical.setForeground(new java.awt.Color(0, 0, 0));
        lexical.setText("Lexical Analyzer");
        lexical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexicalActionPerformed(evt);
            }
        });

        syntax.setBackground(new java.awt.Color(255, 255, 255));
        syntax.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        syntax.setForeground(new java.awt.Color(0, 0, 0));
        syntax.setText("Syntax Analyzer");
        syntax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syntaxActionPerformed(evt);
            }
        });

        semantic.setBackground(new java.awt.Color(255, 255, 255));
        semantic.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        semantic.setForeground(new java.awt.Color(0, 0, 0));
        semantic.setText("Semantic Analyzer");
        semantic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semanticActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(255, 255, 255));
        clear.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        clear.setForeground(new java.awt.Color(0, 0, 0));
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        resultPanel.setBackground(new java.awt.Color(255, 255, 255));
        resultPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        resultPanel.setForeground(new java.awt.Color(0, 0, 0));

        resultText.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        resultText.setForeground(new java.awt.Color(0, 0, 0));
        resultText.setToolTipText("");

        resultLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        resultLabel.setForeground(new java.awt.Color(0, 0, 0));
        resultLabel.setText("Result:");

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultText, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resultText, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        codePanel.setBackground(new java.awt.Color(255, 255, 255));
        codePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        codeText.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        codeText.setForeground(new java.awt.Color(0, 0, 0));

        tokenText.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        tokenText.setForeground(new java.awt.Color(0, 0, 0));

        tokenLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        tokenLabel.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout codePanelLayout = new javax.swing.GroupLayout(codePanel);
        codePanel.setLayout(codePanelLayout);
        codePanelLayout.setHorizontalGroup(
            codePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(codePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codeText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(codePanelLayout.createSequentialGroup()
                        .addComponent(tokenLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tokenText, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        codePanelLayout.setVerticalGroup(
            codePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codeText, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(codePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tokenText, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tokenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        developersLabel.setForeground(new java.awt.Color(0, 0, 0));
        developersLabel.setText("Created by: Santos, Adi, & Maxwell");

        javax.swing.GroupLayout applicationLayout = new javax.swing.GroupLayout(application);
        application.setLayout(applicationLayout);
        applicationLayout.setHorizontalGroup(
            applicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(applicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(developersLabel)
                    .addGroup(applicationLayout.createSequentialGroup()
                        .addGroup(applicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(semantic, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(syntax, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lexical, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(file, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(applicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(codePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        applicationLayout.setVerticalGroup(
            applicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(applicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(file, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(applicationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(applicationLayout.createSequentialGroup()
                        .addComponent(lexical, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(syntax, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(semantic, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(codePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(developersLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(application, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(application, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    //open file button is pressed    
    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        //clear text before running method
        resultText.setText("");
        tokenText.setText("");
        tokenLabel.setText("");
        
        //opens file explorer
        JFileChooser fileChooser = new JFileChooser(); 
        fileChooser.showOpenDialog(null);
        File f = fileChooser.getSelectedFile();
        
        //stores input from text file
        try{
            Scanner input = new Scanner(f);
            while(input.hasNext()){
                String fileContent = input.nextLine();
                codeText.setText(fileContent);
            }
        }
        //error handling for file
        catch(FileNotFoundException e){
            JOptionPane.showMessageDialog(this, "File not found");
        }
    }//GEN-LAST:event_fileActionPerformed
    
    //lexical analyzer button is pressed
    private void lexicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexicalActionPerformed
        //clear text before running method
        resultText.setText("");
        tokenText.setText("");
        tokenLabel.setText("");
        
        //put input into an array
        String token[];
        String code = codeText.getText();
        
        //if button is pressed without opening code text file 
        if(code == null){
            JOptionPane.showMessageDialog(this, "Code is missing!");
        }
        
        else{
            
            token = code.split(" ");

            //lexemes for tokens
            String datatype[]={"int","double","char","String"};
            String value[]={"\"", "\'", ".","1","2","3","4","5","6","7","8","9","0"};

            for(int a=0;a<token.length;a++){

                //determines and prints if input is a datatype
                for(int b=0;b<datatype.length;b++){
                    if(token[a].equals(datatype[b])){
                        resultText.setText(resultText.getText() + "<data_type> ");
                        break;
                    }
                }

                //determines and prints if input is a value
                for(int b=0;b<value.length;b++){
                    if(token[a].contains(value[b])){
                        resultText.setText(resultText.getText() +"<value> ");
                        break;
                    }
                }

                //determines and prints if input is an identifier
                if(!token[a].equals("String") && !token[a].equals("int") && !token[a].equals("double")
                        && !token[a].equals("char") && !token[a].contains("0")  && !token[a].contains("1")
                        && !token[a].contains("2") && !token[a].contains("3") && !token[a].contains("4")
                        && !token[a].contains("5") && !token[a].contains("6") && !token[a].contains("7")
                        && !token[a].contains("8") && !token[a].contains("9") && !token[a].contains("\"")
                        && !token[a].contains("\'") && !token[a].equals(";") && !token[a].equals("=")){
                    resultText.setText(resultText.getText() + "<identifier> ");
                }

                //determines and prints if input is an assignment operator
                if(token[a].equals("=")){
                    resultText.setText(resultText.getText() + "<assignment_operator> ");
                }

                //determines and prints if input is a delimiter
                if(token[a].endsWith(";")){
                    resultText.setText(resultText.getText() + "<delimiter> ");
                }
            }
        }
    }//GEN-LAST:event_lexicalActionPerformed
    
    //syntax analyzer button is pressed
    private void syntaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syntaxActionPerformed
        //put input into an array
        String[] token;
        String result = resultText.getText();
        tokenLabel.setText("Tokens:");
        tokenText.setText(result);
        
        //if button is pressed without tokens displayed from lexical analysis
        if(result.isBlank()){
            JOptionPane.showMessageDialog(this, "Tokens missing!");
        }
        
        else{
            
            token = result.split(" ");

            //correct token order: <data_type> <identifier> <assignment_operator> <value> <delimiter>
            String[] correct = {"<data_type>","<identifier>","<assignment_operator>","<value>","<delimiter>"};

            //array that stores comparing result
            String[] checking = new String[5];
            
            //int that stores the case to be used for switch
            int condition = 0;
            
            //if number of token is below 5
            if(token.length < 5){
                condition = 1;
            }
            
            //if number of token is above 5
            else if(token.length > 5){
                condition = 2;
            }
            
            //compare input tokens to correct syntax order if token number is equal to 5
            if(token.length == 5){
                for(int a=0;a<token.length;a++){
                    if(token[a].contentEquals(correct[a])){
                        checking[a] = "true";
                    }

                    else {
                        checking[a] = "false";
                    }
                }
            }            
            
            //only check for false if token number is equal to 5
            if(checking[4] != null){
                for(String s : checking) {
                    if(s.contains("false")) {
                        condition = 3;
                    }

                    else{
                        condition = 4;
                    }
                }
            }
            
            switch(condition){
                
                case 1 -> //if number of token is below 5, print error
                resultText.setText("Syntax Error!");
                
                case 2 -> //if number of token is above 5, print error
                resultText.setText("Syntax Error!");
                
                case 3 -> //Prints Syntax Error if there's a false statement
                resultText.setText("Syntax Error!");
                
                case 4 -> //Prints Syntax is correct if all statements equal to true
                resultText.setText("Syntax is Correct!");
            }
        }
    }//GEN-LAST:event_syntaxActionPerformed
    
    //semantic analyzer button is pressed
    private void semanticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semanticActionPerformed
        //put input into an array
        String[] token;
        String code = codeText.getText();
        tokenText.setText("");
        tokenLabel.setText("");
        
        //if button is pressed without opening code text file 
        if(code == null){
            JOptionPane.showMessageDialog(this, "Code is missing!");
        }
        
        else{
            
            token = code.split(" ");

            //values needed
            String[] datatype = {"String","int","char","double"};
            String[] nums = {"1","2","3","4","5","6","7","8","9","0"};
            String[] chars = {"a","b","c","d","e","f","g","h","i","j","k","l",
                    "m","n", "o","p","q","r","s","t","u","v","w","q","y","z"};

            String condition = "";

            //if input expression does not contain value
            if(token.length < 4){
                for (String s : datatype) {
                    if (token[0].equals(s)) {
                        if (!token[1].contains("\"") && !token[1].contains("'") && token[1].endsWith(";")) {
                            condition = "true";
                        }
                    }
                }
            }

            //else input expression contains value
            else {

                switch (token[0]) {
                    //case data type = int
                    case "int" -> {
                        for (int a = 0; a < 10; a++) {
                            if (!token[3].contains(".") && token[3].contains(nums[a])) {
                                if (token[3].endsWith(";")) {
                                    condition = "true";
                                    break;
                                } else {
                                    condition = "false";
                                    break;
                                }
                            }
                        }
                    }
                    //case data type = double
                    case "double" -> {
                        for (int a = 0; a < 10; a++) {
                            if (token[3].contains(".") && token[3].contains(nums[a])) {
                                if (token[3].endsWith(";")) {
                                    condition = "true";
                                    break;
                                } else {
                                    condition = "false";
                                    break;
                                }
                            }
                        }
                    }
                    //case data type = char
                    case "char" -> {
                        for (int a = 0; a < 26; a++) {
                            if (token[3].contains("'" + chars[a] +"'")) {
                                if (token[3].endsWith(";")) {
                                    condition = "true";
                                    break;
                                } else {
                                    condition = "false";
                                    break;
                                }
                            }
                        }
                    }
                    //case data type = String
                    case "String" -> {
                        String stholder = "";
                        for (String s : token) {
                            stholder += s;
                        }   
                        if(token[3].startsWith("\"")){
                            if (stholder.endsWith("\";")) {
                                condition = "true";
                            } else {
                                condition = "false";
                            }
                        }
                    }
                }
            }
            
            switch (condition) {

                case "true" -> //print semantically correct if no errors found
                    resultText.setText("Semantically Correct!");
                case "false" -> //print semantically incorrect if errors found
                    resultText.setText("Semantically Incorrect!");
                default -> //default is semantically incorrect if conditions were not passed
                    resultText.setText("Semantically Incorrect!");
            }
        }
        
        
        
    }//GEN-LAST:event_semanticActionPerformed
    
    //clear button is pressed
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        resultText.setText(null);
        codeText.setText(null);
        tokenText.setText(null);
        tokenLabel.setText(null);
    }//GEN-LAST:event_clearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compiler().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel application;
    private javax.swing.JButton clear;
    private javax.swing.JPanel codePanel;
    private javax.swing.JLabel codeText;
    private javax.swing.JLabel developersLabel;
    private javax.swing.JButton file;
    private javax.swing.JButton lexical;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JLabel resultText;
    private javax.swing.JButton semantic;
    private javax.swing.JButton syntax;
    private javax.swing.JLabel tokenLabel;
    private javax.swing.JLabel tokenText;
    // End of variables declaration//GEN-END:variables
}
